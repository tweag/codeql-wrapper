name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0 - without v prefix)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run tests
      run: poetry run pytest

  build-and-release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version in pyproject.toml
      run: |
        poetry version ${{ github.event.inputs.version }}
        echo "VERSION_UPDATED=true" >> $GITHUB_ENV

    - name: Verify version update
      run: |
        NEW_VERSION=$(poetry version --short)
        echo "New version: $NEW_VERSION"
        if [ "$NEW_VERSION" != "${{ github.event.inputs.version }}" ]; then
          echo "Error: Version mismatch. Expected ${{ github.event.inputs.version }}, got $NEW_VERSION"
          exit 1
        fi
        echo "FINAL_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Reinstall package with new version
      run: poetry install --no-interaction

    - name: Verify package version
      run: |
        PACKAGE_VERSION=$(poetry run python -c "from codeql_wrapper import __version__; print(__version__)")
        echo "Package version: $PACKAGE_VERSION"
        if [ "$PACKAGE_VERSION" != "${{ github.event.inputs.version }}" ]; then
          echo "Error: Package version mismatch. Expected ${{ github.event.inputs.version }}, got $PACKAGE_VERSION"
          exit 1
        fi

    - name: Run tests with new version
      run: poetry run pytest tests/test_cli.py::TestCLI::test_cli_version -v

    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "Bump version to ${{ github.event.inputs.version }}"

    - name: Build package
      run: poetry build

    - name: Create and push Git tag
      run: |
        git tag v${{ github.event.inputs.version }}
        git push origin main
        git push origin v${{ github.event.inputs.version }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        draft: false
        prerelease: false
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: poetry publish
